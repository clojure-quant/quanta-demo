 {:modular (modular.system/modular-env)  ; {:profile "jetty"  :config ["demo.edn" "secrets.edn"]}
 :components
 {:config {:start (modular.config/load-config! (:config #ref [:modular]))}
  :secrets {:start (clojure.edn/read-string
                    (slurp #envf ["%s/goldly/quanta.edn" "MYVAULT"]))}

  :exts {:start (extension/discover)}

  :timbre {:start (modular.log/timbre-config!
                   (:timbre/clj (deref (clip/ref :config))))}

  ; empty map means no users are configured, so always permissioned.
  :permission {:start (modular.permission.core/start-permissions {})}

  :clj-service {:start (clj-service.core/start-clj-services
                        (clip/ref :permission)
                        (clip/ref :exts))}

  ;:reval {:start (reval.core/start-reval
  ;                {:config (:reval (deref (clip/ref :config)))
  ;                 :clj  (clip/ref :clj-service)
  ;                 :reval-role nil})}

  :webly {:start (webly.app.app/start-webly
                  (clip/ref :exts)
                  (deref (clip/ref :config))
                  (:profile #ref [:modular]))
          :stop (webly.app.app/stop-webly this)}

  :nrepl {:start (nrepl.server/start-server
                  :bind "0.0.0.0"
                  :port 9100
                  :middleware cider.nrepl.middleware/cider-middleware
                  :handler cider.nrepl/cider-nrepl-handler)
          :stop (.close this)}

  ;; QUANTA:

  :asset-db {:start (quanta.notebook.asset-add/add-assets)}

  :techml-render-ui {:start (demo.goldly.reval/add-techml-render-ui)}

  :duckdb {; bars.ddb (because duck-db db has .ddb extension)
           :start (ta.db.bars.duckdb/start-bardb-duck ".data/duckdb/bars.ddb")
           :stop (ta.db.bars.duckdb/stop-bardb-duck this)
           :post-start ta.db.bars.duckdb.table/init-tables}

  :bardb-sources {:start (ta.db.bars.sources/start-bardb-sources
                          {:duckdb (clip/ref :duckdb)
                           :nippy (ta.db.bars.nippy/start-bardb-nippy ".data/kibot-intraday/")})}

  :import-manager {:start (ta.import.core/start-import-manager
                           {:kibot (ta.import.provider.kibot.ds/create-import-kibot
                                    (:kibot (clip/ref :secrets)))
                            :kibot-http (ta.import.provider.kibot-http.ds/create-import-kibot-http
                                         (:kibot (clip/ref :secrets)))
                            ;:quandl {:start (ta.import.provider.quandl.raw/set-key!
           ;                 (:quandl (clip/ref :secrets)))}
                            :eodhd (ta.import.provider.eodhd.ds/create-import-eodhd
                                    (:eodhd (clip/ref :secrets)))
                            :alphavantage (ta.import.provider.alphavantage.ds/create-import-alphavantage
                                           (:alphavantage (clip/ref :secrets)))
                            :bybit (ta.import.provider.bybit.ds/create-import-bybit)})}

  :bardb-dynamic {:start (ta.db.bars.dynamic/start-bardb-dynamic
                          (clip/ref :duckdb)
                          (clip/ref :import-manager)
                          ".data/overviewdb")
                  :stop (ta.db.bars.dynamic/stop-bardb-dynamic this)}

  :import-manager-compressing {:start (ta.import.provider.compress/start-compressing-provider
                                       (clip/ref :bardb-dynamic)
                                       {; we just request daily and minute bars, the rest gets
                                        ; calculated.
                                        :Y :d
                                        :M :d
                                        :W :d
                                        ;:d :d ; use daily from source.
                                        :h :m
                                        :m30 :m
                                        :m15 :m
                                        ;:m :m ; use minute from source.
                                        })}

  :bardb-dynamic-compressing {:start (ta.db.bars.dynamic/start-bardb-dynamic
                                      (clip/ref :duckdb)
                                      (clip/ref :import-manager-compressing)
                                      ".data/overviewdb-compressing")
                              :stop (ta.db.bars.dynamic/stop-bardb-dynamic this)}

  :live {:start (ta.algo.env/create-env-javelin (clip/ref ;:bardb-dynamic
                                                          :bardb-dynamic-compressing
                                                          ))}

  :quote-manager {:start (ta.quote.quote-manager/create-quote-manager
                          {})}

  :tickerplant {:start (ta.live.tickerplant/start-tickerplant
                        {:algo-env (clip/ref :live)
                         :quote-manager (clip/ref :quote-manager)})}

  :telegram {:start (telegram.service/telegram-bot-start
                     (:telegram (clip/ref :secrets))
                     {:commands [{:command "ping" :description "service ok?"
                                  :rpc-fn quanta.studio.telegram/ping}
                                 {:command "testalert" :description "test alert"
                                  :rpc-fn quanta.alert/test-alert}
                                 {:command "subscribe" :description "subscribe topic"
                                  :rpc-fn telegram.pubsub/subscribe
                                  :opts [{:title "topic" :options ["error" "trade-signal" "trade-signal-debug"]}]}
                                 {:command "unsubscribe" :description "unsubscribe topic"
                                  :rpc-fn telegram.pubsub/unsubscribe
                                  :opts [{:title "topic" :options ["error" "trade-signal" "trade-signal-debug"]}]}
                                 {:command "subscriptions" :description "current subscriptions"
                                  :rpc-fn telegram.pubsub/my-subscriptions}]})}

  :studio {:start (quanta.studio/start-studio
                   {:exts (clip/ref :exts)
                    :clj (clip/ref :clj-service)
                    :role nil
                    :bar-db (clip/ref :bardb-dynamic-compressing)
                    ;:env-live (clip/ref :live)
                    ; we use the live env via the tickerplant, this means that when studio
                    ; gets started tickerplant is already up and can start watching the live-env.
                    :env-live (:algo-env (clip/ref :tickerplant))
                    :websocket (:websocket (clip/ref :webly))
                    :telegram (clip/ref :telegram)})}

  :alex-bollinger-variations-chart
  {:start (quanta.studio/start-variations
           (clip/ref :studio)
           :alex/bollinger
           :chart
           [:asset ["BTCUSDT"
                    "ETHUSDT"
                    "SOLUSDT" ; solana
                    "XRPUSDT" ; ripple
                    "ADAUSDT" ; cardano
                    "BNBUSDT" ; binance coin
                    "TRXUSDT" ; tron
                    "LINKUSDT" ;chainlink
                    "BCHUSDT" ;bitcoin cash
                    "DAIUSDT" ; dai
                    "LTCUSDT" ; litecoin
                    ; "XMRUSDT" ; monero ; bybit not listed?
                    "XLMUSDT" ; stella
                    "EOSUSDT" ; eos
                    "XTZUSDT" ; tezos
                    ]
            :calendar [;[:crypto :m]
                       ;[:crypto :h]
                       [:crypto :m15]
                       ;[:crypto :m30]
                       ]
            ])}
  
  :alex-bollinger-variations-alert
  {:start (quanta.studio/start-variations
           (clip/ref :studio)
           :alex/bollinger
           :alert
           [:asset ["BTCUSDT"
                    "ETHUSDT"
                    "SOLUSDT" ; solana
                    "XRPUSDT" ; ripple
                    "ADAUSDT" ; cardano
                    "BNBUSDT" ; binance coin
                    "TRXUSDT" ; tron
                    "LINKUSDT" ;chainlink
                    "BCHUSDT" ;bitcoin cash
                    "DAIUSDT" ; dai
                    "LTCUSDT" ; litecoin
                    ;"XMRUSDT" ; monero ; bybit not listed?
                    "XLMUSDT" ; stella
                    "EOSUSDT" ; eos
                    "XTZUSDT" ; tezos
                    ]
            :calendar [[:crypto :m]
                       [:crypto :h]
                       [:crypto :m15]
                       [:crypto :m30]
                       ]])}



;
  }}
