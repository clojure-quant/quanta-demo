 {:modular (modular.system/modular-env)  ; {:profile "jetty"  :config ["demo.edn" "secrets.edn"]}
 :components
 {:config {:start (modular.config/load-config! (:config #ref [:modular]))}
  :secrets {:start (clojure.edn/read-string
                    (slurp #envf ["%s/goldly/trateg.edn" "MYVAULT"]))}

  :reval {:start (reval.config/set-config!
                  (:reval (deref (clip/ref :config))))}

  :timbre {:start (modular.log/timbre-config!
                   (:timbre/clj (deref (clip/ref :config))))}

  :asset-db {:start (quanta.notebook.asset-add/add-assets)}

  :duckdb {; todo: change /bars to /bars.ddb (duck-db db has .ddb extension)
           :start (ta.db.bars.duckdb/start-bardb-duck "output/duckdb/bars.ddb")
           :stop (ta.db.bars.duckdb/stop-bardb-duck this)
           :post-start ta.db.bars.duckdb/init-tables}

  :bardb-sources {:start (ta.db.bars.sources/start-bardb-sources
                          {:duckdb (clip/ref :duckdb)
                           :nippy (ta.db.bars.nippy/start-bardb-nippy "output/kibot-intraday/")})}

  :import-manager {:start (ta.import.core/start-import-manager
                           {:kibot (ta.import.provider.kibot.ds/create-import-kibot
                                    (:kibot (clip/ref :secrets)))
                            :kibot-http (ta.import.provider.kibot-http.ds/create-import-kibot-http
                                         (:kibot (clip/ref :secrets)))
                            ;:quandl {:start (ta.import.provider.quandl.raw/set-key!
           ;                 (:quandl (clip/ref :secrets)))}
                            :eodhd (ta.import.provider.eodhd.ds/create-import-eodhd
                                    (:eodhd (clip/ref :secrets)))
                            :alphavantage (ta.import.provider.alphavantage.ds/create-import-alphavantage
                                           (:alphavantage (clip/ref :secrets)))
                            :bybit (ta.import.provider.bybit.ds/create-import-bybit)})}

  :bardb-dynamic {:start (ta.db.bars.dynamic/start-bardb-dynamic
                          (clip/ref :duckdb)
                          (clip/ref :import-manager)
                          "output/overviewdb")
                  :stop (ta.db.bars.dynamic/stop-bardb-dynamic this)}

;
  }}
