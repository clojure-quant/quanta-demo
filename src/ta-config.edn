{:timbre/clj {:min-level [[#{"org.apache.http.*"
                             "org.eclipse.aether.*"
                             "org.eclipse.jetty.*"
                             "modular.oauth2.*"
                             "modular.oauth2.token.refresh.*"
                             "modular.ws.*"
                             "webly.web.*"} :warn] ; webserver stuff - warn only
                                      ; [#{"modular.ws.*"} :debug]
                          [#{"modular.persist.*"} :warn]
                          [#{"goldly.service.core"} :warn] ; goldly services - less logging
                          ; trateg specific:
                          [#{"ta.import.provider.bybit.*"} ;bybit is already stable
                             :warn]
                          [#{"*"} :info]] ; default -> info
              :appenders {:default {:type :console-color}
                          :rolling {:type :file-rolling
                                    :path "output/quanta.log"
                                    :pattern :monthly}}}

 :webly/web-server {:port 8080
                    :host "0.0.0.0"
                    :ssl-port 8443
                    :keystore "./certs/keystore.p12"
                    :key-password "password" ; Password you gave when creating the keystore
                    :jetty-ws {"/api/chsk" :ws/chsk-get}}

 :goldly {:lazy true
          :src-dir "src"
          ; runtime
          :autoload-cljs-dir ["demo/goldly/page"
                              "demo/goldly/page/test"]
          :routes {:app {"" demo.goldly.page.main/main-page
                         "test/" {"test" demo.goldly.page.test.test/test-page
                                  "layout1" demo.goldly.page.test.layout/page-layout-1
                                  "layout2" demo.goldly.page.test.layout/page-layout-2
                                  "highchart" demo.goldly.page.test.highchart/highchart-page
                                  "highstock" demo.goldly.page.test.highchart/highstock-page
                                  "color" demo.goldly.page.test.color/color-page
                                  }}
                   :api {"arrow" :dataset/arrow
                         "sentiment" juan.sentiment/sentiment-cookies-wrapped
                         }}}

 :reval {:rdocument  {:storage-root "target/webly/public/rdocument/"
                      :url-root "/api/rdocument/file/"}
         :collections {:study [:clj "quanta/notebook/study/"]
                       :quanta [:clj "quanta/notebook/"]
                       :quanta-ui [:cljs "quanta/notebook/viz/"]
                       :ui [:cljs "demo/goldly/ui_test/"]
                       :dev [:clj "quanta/notebook/dev/"] 
                       ;:demo [:clj "demo/notebook/"]
                       ;:demo-cljs [:cljs "demo/notebook/"]
                       }}

 :ta {:warehouse {:series  {:default "output/db/default/"
                            :crypto "output/db/crypto/"
                            :stocks "output/db/stocks/"
                            :fx "output/db/fx/"
                            :futures "output/db/futures/"
                            :random "output/db/random/"
                            :shuffled  "output/db/shuffled/"
                            :seasonal "output/db/seasonal/"
                            :juan "output/db/juan/"
                            }}
      }


 :demo {:gann-data-file "resources/gann.edn"}

 :keybindings [{:kb "alt-g k",
                :handler [:palette/show],
                :desc "Keybindings dialog"}
               {:kb "esc",
                :handler [:modal/close],
                :desc "Dialog Close"}
               {:kb "alt-g t",
                :handler [:reframe10x-toggle],
                :desc "10x visibility toggle"}
 
                ;{:kb "up"   :handler [:arrow-up]    :desc "Codemirror Key Up"} ; :scope :codemirror
                ;{:kb "down" :handler [:arrow-down] :desc "Codemirror Key Down"} :scope :codemirror
               {:kb "shift-enter" :handler [:codemirror-active/completion-apply]  :desc "applies auto completion"}
               {:kb "ctrl-space"  :handler [:codemirror/completion-get]     :desc "Show possible auto-completions"}
                ; {:spec "enter"    :handler [:completion/clear]          :key ::clear}
                ; {:spec "ctrl"     :handler [:completion/show-all false] :scope :global :key ::show-all-hide}
               {:kb "alt-g c"     :handler [:clojuredocs]               :desc "Look up the symbol under the cursor in ClojureDocs"}
 
                ; eval
               {:kb "alt-shift-enter"     :handler [:notebook/evaluate-all] :desc "Evaluate all segments."}
               {:kb "ctrl-shift-enter" :handler [:notebook/evaluate-all]         :desc "Evaluate all segments"}
               {:kb "ctrl-enter" :handler [:repl/eval-expression]               :desc "Evaluate the highlighted segment"}]
 
 :scratchpad {:tap true}


;
 }
