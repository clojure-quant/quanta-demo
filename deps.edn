{:paths ["src"
         "resources"]
 :deps {org.clojure/clojure  {:mvn/version "1.11.3"}
        aysylu/loom {:mvn/version "1.0.2"}
        techascent/tech.viz {:mvn/version "6.00-beta-16-2"}
        org.pinkgorilla/timbre {:mvn/version "0.0.7"} ; timbre, but alwaays the same version
        org.pinkgorilla/reval {:mvn/version "0.7.160"}
        ; quanta
        io.github.clojure-quant/quanta-studio {:mvn/version "0.3.5"}
        ;io.github.clojure-quant/quanta-studio {:local/root "../quanta-studio" :deps/manifest :deps}
        babashka/process {:mvn/version "0.5.21"}
        ;com.clojure-goes-fast/clj-memory-meter {:mvn/version "0.1.0"}
        }
 :aliases
 {:cljfmt {:extra-deps {cljfmt/cljfmt {:mvn/version "0.8.0"}}
           :main-opts ["-m" "cljfmt.main"
                       "--indents" "cljfmt.edn"]}

  ; example: clojure -X:task :task ':bybit-import' :symbol-list "currency-spot"
  ; see README.md for available tasks

  :task {:extra-deps {org.pinkgorilla/modular {:mvn/version "0.2.56"}}
         :extra-paths ["cli"]
         :exec-fn modular.system/start!
         :exec-args {:config "ta-config.edn"
                     :services "services-task.edn"
                     :run demo.env.task/run}
         :jvm-opts ["-Xmx4G"] ;; or more
         }

  :webly {:extra-deps {org.pinkgorilla/goldly-docs {:mvn/version "0.8.33"}
                       org.pinkgorilla/modular {:mvn/version "0.2.56"}}
          :extra-paths [;"src" "resources"
                        "target/webly" ; to include the sci-bindings info
                        "node_modules"]
          :exec-fn webly.app.app/webly-build
          :exec-args {:config ["quanta-config.edn"]
                      :profile "npm-install"}}

  :npm-install {:exec-args {:profile "npm-install"}}
  :compile {:exec-args {:profile "compile2"}}
  :release {:exec-args {:profile "release"}}
  :release-adv {:exec-args {:profile "release-adv"}}
  :static {:exec-args {:profile "static"}}
  :ci {:exec-args {:profile "ci"}}
  :run {:exec-fn modular.system/start!
        :exec-args {:profile "jetty"
                    :services "services-web.edn"}}

  :run-bare {:exec-fn modular.system/start!
             :exec-args {:profile "jetty"
                         :services "services-web-bare.edn"}}

  :static-sci {:exec-fn goldly.build/static-build-copy-sci-code}

  :web-demo {:extra-deps {quanta/web-demo {:local/root "./web-demo" :deps/manifest :deps}}}
  :web-static {:extra-deps {quanta/static {:local/root "./web-static" :deps/manifest :deps}}}

  :nbeval {:extra-deps {org.pinkgorilla/goldly-docs {:mvn/version "0.8.28"}}
           :exec-fn modular.system/start!
           :exec-args {:run reval.task/eval-all-collections
                       :config  ["ta-config.edn"]
                       :services "services-task.edn"}}

  :nbeval-static {:extra-deps {org.pinkgorilla/goldly-docs {:mvn/version "0.8.28"}}
                  :exec-fn modular.system/start!
                  :exec-args {:run reval.task/eval-all-collections
                              :config  ["ta-config.edn"
                                        {:reval {:rdocument  {:storage-root "target/static/r/rdocument/"
                                                              :url-root "/api/rdocument/file/"}
                                                 :collections {:study [:clj "quanta/notebook/study/"]
                                                               :quanta-docs [:clj "quanta/notebook/docs/"]}}}]
                              :services "services-task.edn"}}

  :public-algos
  {:extra-deps {io.github.clojure-quant/algo-demo {:local/root "../algo-demo" :deps/manifest :deps}}}

  #_:my-algos-direct
  #_{:extra-deps {;io.github.clojure-quant/algo-juan {:git/sha "3fdb0b94b27b9d52ca0a9057fc77784b023219a6"}
                  io.github.clojure-quant/algo-alex {:git/sha "17178469c187b4d085d6120bc865e58dfcbc1309"}
                  io.github.clojure-quant/algo-gann {:git/sha "af82abcd216b8179ff03ae61668bd5a1ebe11295"}
                  io.github.clojure-quant/algo-astro {:git/sha "0006c6a812a67977358838fd01aced21cb6b62c6"}
                  io.github.clojure-quant/algo-joseph {:git/sha "0cf2e362520756d5c55071846e6c5f3c8a57229c"}}}

  :my-algos
  {:extra-deps {;io.github.clojure-quant/algo-juan {:local/root "../algo-juan" :deps/manifest :deps}
                io.github.clojure-quant/algo-alex {:local/root "../algo-alex" :deps/manifest :deps}
                ;io.github.clojure-quant/algo-gann {:local/root "../algo-gann" :deps/manifest :deps}
                ;io.github.clojure-quant/algo-astro {:local/root "../algo-astro" :deps/manifest :deps}
                ;io.github.clojure-quant/algo-joseph {:local/root "../algo-joseph" :deps/manifest :deps}
                }}

  :quote-harvester
  {:exec-fn juan.fix/start-harvesting}

  :duckdb-performance-test
  {:exec-fn quanta.notebook.bardb-performance-test/run-performance-test}

;  
  }}

